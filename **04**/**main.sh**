#!/bin/bash

function main(){

declare -i fo
declare -i sh
declare -i fon
declare -i shr

par1=$(cat text | cut -b 20 | sed -n 1p)
par2=$(cat text | cut -b 20 | sed -n 2p)
par3=$(cat text | cut -b 20 | sed -n 3p)
par4=$(cat text | cut -b 20 | sed -n 4p)

white=1
red=2
green=3
blue=4
purple=5
black=6

f1=0
f2=0
f3=0
f4=0

((i=1))
check_correct $par1 $par2 $par3 $par4
check_prmtrs $par1 $i
fo=$?
((i++))
check_prmtrs $par2 $i
sh=$?
((i++))
check_prmtrs $par3 $i
fon=$?
((i++))
check_prmtrs $par4 $i
shr=$?
check_default $fo
check_default $sh
check_default $fon
check_default $shr

TIMEZONE=$(timedatectl | sed -n 4p | cut -c 17-)
OS=$(uname)
ARCH=$(arch)
DATE=$(date "+%d %B %Y %H:%M:%S")
UPTIME=$(uptime | awk '{print $3}'| sed -e "s/.$//")
UPTIMES=$(cat /proc/uptime | awk '{print $1}')
IP=$(hostname -I | awk '{print $1}')
NETMASK=$(netstat -r | sed -n 4p | awk '{print $3}')
DEFGW=$(netstat -nr | sed -n 3p | awk '{print $2}')
MEM=$(free -m | sed -n 2p | awk '{printf("%.3f Gb", $2*0.001)}')
MEMU=$(free -m | sed -n 2p | awk '{printf("%.3f Gb", $3*0.001)}')
MEMF=$(free -m | sed -n 2p | awk '{printf("%.3f Gb", $4*0.001)}')
ROOTS=$(df --block-size=MB / | sed -n 2p | awk '{printf("%.2f MB",$2*0.01)}')
ROOTU=$(df --block-size=MB / | sed -n 2p | awk '{printf("%.2f MB",$3*0.01)}')
ROOTF=$(df --block-size=MB / | sed -n 2p | awk '{printf("%.2f MB",$4*0.01)}')

echo "$(tput setab $fo)$(tput setaf $sh)**HOSTNAME**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$HOSTNAME**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**TIMEZONE**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$TIMEZONE**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**USER**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$USER**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**OS ARCH**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$OS $ARCH**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**DATE**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$DATE**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**UPTIME**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$UPTIME**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**UPTIME_SEC**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$UPTIMES**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**IP**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$IP**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**MASK**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$NETMASK**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**GATEWAY**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$DEFGW**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**RAM_TOTAL**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$MEM**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**RAM_USED**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$MEMU**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**RAM_FREE**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$MEMF**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**SPACE_ROOT**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$ROOTS**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**SPACE_ROOT_USED**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$ROOTU**$(tput sgr0)"
echo "$(tput setab $fo)$(tput setaf $sh)**SPACE_ROOT_FREE**$(tput sgr 0) = $(tput setab $fon)$(tput setaf $shr)**$ROOTF**$(tput sgr0)"
echo 
echo "Column 1 background = $par1 (red)"
echo "Column 1 font color = $par2 (blue)"
echo "Column 2 background = $par3 (purple)"
echo "Column 2 font color = $par4 (white)"
}

check_correct() {
    if [[ "$1" == "$2" || "$3" == "$4" ]]; then
    echo "Wrong colors, please restart and choose not similar"
    exit
    elif ! [[ "$1" =~ [1-6] && "$2" =~ [1-6] && "$3" =~ [1-6] && "$4" =~ [1-6] ]]; then
        if ! [ "$1" =~ [1-6] ]; then
        f1 = 1
        elif ! [ "$2" =~ [1-6] ]; then
        f2 = 1
        elif ! [ "$3" =~ [1-6] ]; then
        f3 = 1
        elif ! [ "$4" =~ [1-6] ]; then
        f4 = 1
        fi
    fi
}

check_prmtrs(){
    if [[ $1 -eq white ]]; then
        flag=7;
    elif [[ $1 -eq red ]]; then
        flag=1;
    elif [[ $1 -eq green ]]; then
        flag=2;
    elif [[ $1 -eq blue ]]; then
        flag=4;
    elif [[ $1 -eq purple ]]; then
        flag=5;
    elif [[ $1 -eq black ]]; then
        flag=0;
    else
        if [[ $2 -eq 1 ]]; then # Когда i = 1;
            flag=-1
        elif [[ $2 -eq 2 ]]; then
            flag=-2
        elif [[ $2 -eq 3 ]]; then
            flag=-3 
        elif [[ $2 -eq 4 ]]; then
            flag=-4
        fi
    fi
    return flag
}

check_default(){
    if [[ $1<0 ]]; then
    flag=-1
    else
    flag=0
    fi
    return flag
}

main
